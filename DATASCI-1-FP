# app.py

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

st.set_page_config(layout="wide")

# Load data
@st.cache_data
def load_data():
    return pd.read_csv("student_mental_health.csv")

data = load_data()
st.title("ðŸŽ“ Student Mental Health Dashboard & Predictor")

# Tabs: Dashboard | Prediction
tab1, tab2 = st.tabs(["ðŸ“Š Dashboard", "ðŸ§  Prediction"])

with tab1:
    st.header("Mental Health Data Overview")
    st.dataframe(data.head())

    # Plot 1: Gender distribution
    st.subheader("Distribution by Gender")
    gender_counts = data["Gender"].value_counts()
    st.bar_chart(gender_counts)

    # Plot 2: Mental health treatment need by course
    st.subheader("Treatment Need by Course")
    treatment_by_course = data.groupby("Course")["treatment"].value_counts().unstack().fillna(0)
    st.bar_chart(treatment_by_course)

    # Plot 3: Heatmap of correlations (if numeric data present)
    st.subheader("Correlation Heatmap")
    df_numeric = data.select_dtypes(include='number')
    if not df_numeric.empty:
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.heatmap(df_numeric.corr(), annot=True, cmap="coolwarm", ax=ax)
        st.pyplot(fig)
    else:
        st.info("No numeric columns to compute correlation.")

with tab2:
    st.header("Predict Student's Mental Health Treatment Need")

    # Preprocessing
    df = data.copy()
    label_encoders = {}
    for col in df.select_dtypes(include='object').columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    X = df.drop("treatment", axis=1)
    y = df["treatment"]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier()
    model.fit(X_train, y_train)

    # Input UI
    st.sidebar.header("Input Student Details")
    user_input = {}
    for col in X.columns:
        if col in label_encoders:
            options = list(label_encoders[col].classes_)
            user_input[col] = st.sidebar.selectbox(col, options)
        else:
            user_input[col] = st.sidebar.slider(col, float(data[col].min()), float(data[col].max()))

    if st.sidebar.button("Predict"):
        input_df = pd.DataFrame([user_input])
        for col, le in label_encoders.items():
            input_df[col] = le.transform(input_df[col])
        prediction = model.predict(input_df)[0]
        result = "Needs Treatment" if prediction == 1 else "Does Not Need Treatment"
        st.success(f"The model predicts: **{result}**")
